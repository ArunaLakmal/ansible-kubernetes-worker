- name: download ca
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/ca.pem
    dest: "{{ role_path }}/files/ca.pem"
    mode: get

- name: download ca-key.pem
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/ca-key.pem
    dest: "{{ role_path }}/files/ca-key.pem"
    mode: get

- name: download ca-config
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/ca-config.json
    dest: "{{ role_path }}/files/ca-config.json"
    mode: get

- name: generate kube worker csr
  template:
    src: "{{ role_path }}/templates/worker-csr.json.j2"
    dest: "{{ role_path }}/files/{{worker_host}}-csr.json"

- name: generate certificate for worker nodes
  shell: "cfssl gencert -ca={{ role_path }}/files/ca.pem -ca-key={{ role_path }}/files/ca-key.pem -config={{ role_path }}/files/ca-config.json -hostname={{ worker_host }},{{  worker_ip }},{{ worker_lb }} -profile=kubernetes {{ role_path }}/files/{{ worker_host }}-csr.json | cfssljson -bare {{ role_path }}/files/{{ worker_host}}"

- name: generate kube config for the workers
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way --certificate-authority={{ role_path }}/files/ca.pem --embed-certs=true --server=https://{{ master_lb }}:6443 --kubeconfig={{ role_path }}/files/{{ worker_host}}.kubeconfig
    kubectl config set-credentials system:node:{{ worker_host }} --client-certificate={{ role_path }}/files/{{ worker_host}}.pem --client-key={{ role_path }}/files/{{ worker_host}}-key.pem --embed-certs=true --kubeconfig={{ role_path }}/files/{{ worker_host}}.kubeconfig
    kubectl config set-context default --cluster=kubernetes-the-hard-way --user=system:node:{{ worker_host }} --kubeconfig={{ role_path }}/files/{{ worker_host}}.kubeconfig
    kubectl config use-context default --kubeconfig={{ role_path }}/files/{{ worker_host}}.kubeconfig

- name: generate kube proxy config 
  shell: | 
    kubectl config set-cluster kubernetes-the-hard-way --certificate-authority={{ role_path }}/files/ca.pem --embed-certs=true --server=https://{{ master_lb }}:6443 --kubeconfig={{ role_path }}/files/kube-proxy.kubeconfig
    kubectl config set-credentials system:kube-proxy --client-certificate={{ role_path }}/files/kube-proxy.pem --client-key={{ role_path }}/files/kube-proxy-key.pem --embed-certs=true --kubeconfig={{ role_path }}/files/kube-proxy.kubeconfig
    kubectl config set-context default --cluster=kubernetes-the-hard-way --user=system:kube-proxy --kubeconfig={{ role_path }}/files/kube-proxy.kubeconfig
    kubectl config use-context default --kubeconfig={{ role_path }}/files/kube-proxy.kubeconfig

- name: "{{ worker_host }}-key cert"
  copy:
    src: "{{ role_path }}/files/{{ worker_host }}-key.pem"
    dest: /var/lib/kubelet/
    mode: '0755'

- name: "{{ worker_host }} cert"
  copy:
    src: "{{ role_path }}/files/{{ worker_host }}.pem"
    dest: /var/lib/kubelet/
    mode: '0755'

- name: "{{ worker_host }}.kubeconfig"
  copy:
    src: "{{ role_path }}/files/{{ worker_host }}.kubeconfig"
    dest: /var/lib/kubelet/kubeconfig
    mode: '0755'

- name: root ca 
  copy:
    src: "{{ role_path }}/files/ca.pem"
    dest: /var/lib/kubernetes/

- name: kube-proxy 
  copy:
    src: "{{ role_path }}/files/kube-proxy.kubeconfig"
    dest: /var/lib/kube-proxy/kubeconfig
    mode: '0755'

#This option is disabled as we do not plan to use the CNI bridge network as per the 
#Kuberenetes Hardway guide
#- name: bridge network
#  template:
#    src: "{{ role_path }}/templates/10-bridge.conf.j2"
#    dest: "/etc/cni/net.d/10-bridge.conf"

#This option is disabled as we do not plan to use the CNI bridge network as per the 
#Kuberenetes Hardway guide
#- name: loop back network
#  template:
#    src: "{{ role_path }}/templates/99-loopback.conf.j2"
#   dest: "/etc/cni/net.d/99-loopback.conf"

- name: containerd configuration
  template:
    src: "{{ role_path }}/templates/config.toml.j2"
    dest: "/etc/containerd/config.toml"

- name: containerd service setup
  template:
    src: "{{ role_path }}/templates/containerd.service.j2"
    dest: "/etc/systemd/system/containerd.service"

- name: kubelet configuration
  template: 
    src: "{{ role_path }}/templates/kubelet-config.yaml.j2"
    dest: "/var/lib/kubelet/kubelet-config.yaml"

- name: kubelet service configuration
  template:
    src: "{{ role_path }}/templates/kubelet.service.j2"
    dest: "/etc/systemd/system/kubelet.service"

- name: kube proxy configuration 
  template:
    src: "{{ role_path }}/templates/kube-proxy-config.yaml.j2"
    dest: "/var/lib/kube-proxy/kube-proxy-config.yaml"

- name: kube proxy service 
  template:
    src: "{{ role_path }}/templates/kube-proxy.service.j2"
    dest: "/etc/systemd/system/kube-proxy.service"

- name: systemd reload
  systemd:
    daemon_reload: yes

- name: enable services and ensure not masked
  systemd:
    name: "{{ item }}"
    enabled: yes
    masked: no
  loop: "{{ services }}"

- name: run services
  systemd:
    state: started
    name: "{{ item }}"
  loop: "{{ services }}"
